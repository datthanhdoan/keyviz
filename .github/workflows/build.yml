name: Build KeyViz

on:
  release:
    types: [ created, published ]
  workflow_dispatch:
  workflow_run:
    workflows: ["Auto Create Release"]
    types:
      - completed
    branches:
      - main

# Cấp quyền cho GITHUB_TOKEN
permissions:
  contents: write  # Cần thiết để tải lên tệp vào releases

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Get latest release
        if: github.event_name == 'workflow_run'
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            if (releases.length === 0) {
              core.setFailed('No releases found');
              return;
            }
            const latestRelease = releases[0];
            core.setOutput('upload_url', latestRelease.upload_url);
            return latestRelease.upload_url;
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Build Windows
        run: flutter build windows --release --verbose
        continue-on-error: true
      
      - name: Fix Windows Build Issues
        run: |
          # Kiểm tra và sửa các vấn đề phổ biến
          
          # 1. Kiểm tra file flutter_windows.dll
          $flutterDll = "build/windows/x64/runner/Release/flutter_windows.dll"
          if (-Not (Test-Path $flutterDll)) {
            Write-Host "flutter_windows.dll not found, copying from cache"
            $cachePath = "$env:FLUTTER_ROOT/bin/cache/artifacts/engine/windows-x64/flutter_windows.dll"
            if (Test-Path $cachePath) {
              Copy-Item $cachePath -Destination "build/windows/x64/runner/Release/" -Force
            }
          }
          
          # 2. Kiểm tra các thư mục data
          $dataFolder = "build/windows/x64/runner/Release/data"
          if (-Not (Test-Path $dataFolder)) {
            Write-Host "Data folder not found, creating it"
            New-Item -ItemType Directory -Force -Path $dataFolder
            
            # Copy assets
            if (Test-Path "assets") {
              Copy-Item -Path "assets" -Destination $dataFolder -Recurse -Force
            }
          }
          
          # 3. Tạo file cấu hình
          $configContent = '{"app_name":"KeyViz","version":"0.0.3","debug_mode":true}'
          Set-Content -Path "build/windows/x64/runner/Release/config.json" -Value $configContent
          
          # 4. Tạo file debug.bat để chạy ứng dụng với log
          Set-Content -Path "build/windows/x64/runner/Release/debug.bat" -Value "@echo off`necho Starting KeyViz with debug logging...`nstart /b keyviz.exe > debug.log 2>&1`necho Log file created at debug.log"
          
          # 5. Tạo file README với hướng dẫn debug
          Set-Content -Path "build/windows/x64/runner/Release/DEBUG.txt" -Value "Nếu ứng dụng không chạy được, vui lòng:`n`n1. Chạy file debug.bat để tạo file log`n2. Kiểm tra file debug.log để xem lỗi`n3. Gửi file debug.log cho nhà phát triển để được hỗ trợ"
          
          # 6. Kiểm tra và sửa các plugin
          $pluginsDir = "build/windows/x64/runner/Release/data/flutter_assets/packages"
          if (-Not (Test-Path $pluginsDir)) {
            Write-Host "Plugins directory not found, creating it"
            New-Item -ItemType Directory -Force -Path $pluginsDir
          }
          
          # 7. Kiểm tra thư mục flutter_assets
          $flutterAssetsDir = "build/windows/x64/runner/Release/data/flutter_assets"
          if (-Not (Test-Path $flutterAssetsDir)) {
            Write-Host "Flutter assets directory not found, creating it"
            New-Item -ItemType Directory -Force -Path $flutterAssetsDir
            
            # Copy flutter assets từ build cache
            $cacheAssetsDir = "build/flutter_assets"
            if (Test-Path $cacheAssetsDir) {
              Copy-Item -Path "$cacheAssetsDir/*" -Destination $flutterAssetsDir -Recurse -Force
            }
          }
          
          # 8. Kiểm tra các plugin DLL
          $pluginsList = @(
            "hid_listener",
            "window_size",
            "tray_manager",
            "url_launcher_windows",
            "window_manager",
            "path_provider_windows",
            "flutter_acrylic"
          )
          
          foreach ($plugin in $pluginsList) {
            $pluginDllPath = "build/windows/x64/runner/Release/$plugin.dll"
            $pluginSrcPath = "build/windows/plugins/$plugin/Release/$plugin.dll"
            
            if ((-Not (Test-Path $pluginDllPath)) -and (Test-Path $pluginSrcPath)) {
              Write-Host "Copying plugin DLL: $plugin"
              Copy-Item $pluginSrcPath -Destination "build/windows/x64/runner/Release/" -Force
            }
          }
          
          # 9. Tạo file .env nếu cần
          Set-Content -Path "build/windows/x64/runner/Release/.env" -Value "ENVIRONMENT=production"
      
      - name: Debug Windows Build
        run: |
          Write-Host "Checking Windows build output..."
          
          # Kiểm tra thư mục build
          if (Test-Path "build/windows/x64/runner/Release") {
            Write-Host "Build directory exists"
            Get-ChildItem "build/windows/x64/runner/Release" -Recurse | ForEach-Object {
              Write-Host $_.FullName
            }
          } else {
            Write-Host "Build directory does not exist"
          }
          
          # Kiểm tra file DLL
          $missingDlls = @()
          $requiredDlls = @(
            "flutter_windows.dll",
            "vcruntime140.dll",
            "vcruntime140_1.dll",
            "msvcp140.dll"
          )
          
          foreach ($dll in $requiredDlls) {
            if (-Not (Test-Path "build/windows/x64/runner/Release/$dll")) {
              $missingDlls += $dll
            }
          }
          
          if ($missingDlls.Count -gt 0) {
            Write-Host "Missing DLLs: $missingDlls"
            
            # Thêm các DLL thiếu từ thư viện hệ thống
            foreach ($dll in $missingDlls) {
              if ($dll -like "vcruntime*" -or $dll -like "msvcp*") {
                Write-Host "Copying system DLL: $dll"
                try {
                  Copy-Item "C:/Windows/System32/$dll" -Destination "build/windows/x64/runner/Release/" -ErrorAction SilentlyContinue
                } catch {
                  Write-Host "Failed to copy $dll"
                }
              }
            }
          } else {
            Write-Host "All required DLLs are present"
          }
          
          # Kiểm tra plugin DLL
          Write-Host "Checking plugin DLLs..."
          $pluginDir = "build/windows/x64/runner/Release/data/flutter_assets/packages"
          if (Test-Path $pluginDir) {
            Get-ChildItem $pluginDir -Recurse | ForEach-Object {
              Write-Host $_.FullName
            }
          } else {
            Write-Host "Plugin directory does not exist"
          }
          
          # Kiểm tra cấu trúc thư mục data
          Write-Host "Checking data directory structure..."
          $dataDir = "build/windows/x64/runner/Release/data"
          if (Test-Path $dataDir) {
            Get-ChildItem $dataDir -Recurse -Directory | ForEach-Object {
              Write-Host $_.FullName
            }
          } else {
            Write-Host "Data directory does not exist"
          }
          
          # Kiểm tra file thực thi
          Write-Host "Checking executable..."
          $exePath = "build/windows/x64/runner/Release/keyviz.exe"
          if (Test-Path $exePath) {
            $fileInfo = Get-Item $exePath
            Write-Host "Executable size: $($fileInfo.Length) bytes"
            Write-Host "Executable last modified: $($fileInfo.LastWriteTime)"
          } else {
            Write-Host "Executable not found"
          }
      
      - name: Create Windows ZIP
        run: |
          if (Test-Path "build/windows/x64/runner/Release") {
            # Đảm bảo có đủ các DLL cần thiết
            $vcRedistPath = "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/14.29.30133/x64/Microsoft.VC142.CRT"
            if (Test-Path $vcRedistPath) {
              Write-Host "Copying VC++ Redistributable DLLs"
              Copy-Item "$vcRedistPath/*.dll" -Destination "build/windows/x64/runner/Release/" -Force
            } else {
              Write-Host "VC++ Redistributable path not found, trying alternative"
              $altPath = "C:/Windows/System32"
              $requiredDlls = @("vcruntime140.dll", "vcruntime140_1.dll", "msvcp140.dll")
              foreach ($dll in $requiredDlls) {
                if (Test-Path "$altPath/$dll") {
                  Copy-Item "$altPath/$dll" -Destination "build/windows/x64/runner/Release/" -Force
                }
              }
            }
            
            # Tạo file README với hướng dẫn
            $readmeContent = "KeyViz - Ứng dụng hiển thị phím tắt`n`n"
            $readmeContent += "Nếu ứng dụng không chạy được, vui lòng:`n"
            $readmeContent += "1. Cài đặt Microsoft Visual C++ Redistributable: https://aka.ms/vs/17/release/vc_redist.x64.exe`n"
            $readmeContent += "2. Đảm bảo đã cài đặt .NET Framework 4.8 hoặc cao hơn`n"
            $readmeContent += "3. Khởi động lại máy tính sau khi cài đặt`n`n"
            $readmeContent += "Liên hệ hỗ trợ: [Thông tin liên hệ của bạn]"
            Set-Content -Path "build/windows/x64/runner/Release/README.txt" -Value $readmeContent
            
            # Tạo file ZIP
            Compress-Archive -Path build/windows/x64/runner/Release/* -DestinationPath keyviz-windows.zip -Force
          } else {
            Write-Host "Build directory not found, creating empty zip"
            New-Item -ItemType Directory -Force -Path build/windows/x64/runner/Release
            New-Item -ItemType File -Force -Path build/windows/x64/runner/Release/placeholder.txt
            Set-Content -Path build/windows/x64/runner/Release/placeholder.txt -Value "Build failed"
            Compress-Archive -Path build/windows/x64/runner/Release/* -DestinationPath keyviz-windows.zip
          }
      
      - name: Upload Windows Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url || steps.get_latest_release.outputs.upload_url }}
          asset_path: ./keyviz-windows.zip
          asset_name: keyviz-windows.zip
          asset_content_type: application/zip

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Get latest release
        if: github.event_name == 'workflow_run'
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            if (releases.length === 0) {
              core.setFailed('No releases found');
              return;
            }
            const latestRelease = releases[0];
            core.setOutput('upload_url', latestRelease.upload_url);
            return latestRelease.upload_url;
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Build macOS
        run: flutter build macos --release
        continue-on-error: true
      
      - name: Create macOS DMG
        run: |
          if [ -d "build/macos/Build/Products/Release" ]; then
            cd build/macos/Build/Products/Release
            mkdir -p dmg
            cp -r keyviz.app dmg/ || echo "App not found, creating placeholder"
            if [ ! -d "dmg/keyviz.app" ]; then
              echo "Build failed" > dmg/placeholder.txt
            fi
            hdiutil create -volname "KeyViz" -srcfolder dmg -ov -format UDZO keyviz-macos.dmg
            mv keyviz-macos.dmg ../../../../../
          else
            mkdir -p build/macos/Build/Products/Release/dmg
            echo "Build failed" > build/macos/Build/Products/Release/dmg/placeholder.txt
            cd build/macos/Build/Products/Release
            hdiutil create -volname "KeyViz" -srcfolder dmg -ov -format UDZO keyviz-macos.dmg
            mv keyviz-macos.dmg ../../../../../
          fi
      
      - name: Upload macOS Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url || steps.get_latest_release.outputs.upload_url }}
          asset_path: ./keyviz-macos.dmg
          asset_name: keyviz-macos.dmg
          asset_content_type: application/octet-stream

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Get latest release
        if: github.event_name == 'workflow_run'
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            if (releases.length === 0) {
              core.setFailed('No releases found');
              return;
            }
            const latestRelease = releases[0];
            core.setOutput('upload_url', latestRelease.upload_url);
            return latestRelease.upload_url;
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev libayatana-appindicator3-dev
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Build Linux
        run: flutter build linux --release
        continue-on-error: true
      
      - name: Create Linux TAR
        run: |
          if [ -d "build/linux/x64/release/bundle" ]; then
            cd build/linux/x64/release/bundle
            tar -czvf ../../../../../keyviz-linux.tar.gz .
          else
            mkdir -p build/linux/x64/release/bundle
            echo "Build failed" > build/linux/x64/release/bundle/placeholder.txt
            cd build/linux/x64/release/bundle
            tar -czvf ../../../../../keyviz-linux.tar.gz .
          fi
      
      - name: Upload Linux Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url || steps.get_latest_release.outputs.upload_url }}
          asset_path: ./keyviz-linux.tar.gz
          asset_name: keyviz-linux.tar.gz
          asset_content_type: application/gzip 