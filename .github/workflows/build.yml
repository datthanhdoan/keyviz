name: Build KeyViz

on:
  release:
    types: [ created, published ]
  workflow_dispatch:
  workflow_run:
    workflows: ["Auto Create Release"]
    types:
      - completed
    branches:
      - main
      - develop
  push:
    branches:
      - develop
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.github/workflows/auto-release.yml'

# Cấp quyền cho GITHUB_TOKEN
permissions:
  contents: write  # Cần thiết để tải lên tệp vào releases

jobs:
  get-release-info:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_release_info.outputs.upload_url }}
      is_prerelease: ${{ steps.get_release_info.outputs.is_prerelease }}
      release_id: ${{ steps.get_release_info.outputs.release_id }}
    steps:
      - name: Get release info
        id: get_release_info
        uses: actions/github-script@v6
        with:
          script: |
            // Nếu là sự kiện release, lấy thông tin từ sự kiện
            if (context.eventName === 'release') {
              core.setOutput('upload_url', context.payload.release.upload_url);
              core.setOutput('is_prerelease', context.payload.release.prerelease.toString());
              core.setOutput('release_id', context.payload.release.id);
              return;
            }
            
            // Nếu là push hoặc workflow_run, lấy release mới nhất
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 5
            });
            
            if (releases.length === 0) {
              core.setFailed('No releases found');
              return;
            }
            
            // Nếu là push vào develop, tìm pre-release mới nhất
            if (context.eventName === 'push' && context.ref === 'refs/heads/develop') {
              const preRelease = releases.find(release => release.prerelease);
              if (preRelease) {
                core.setOutput('upload_url', preRelease.upload_url);
                core.setOutput('is_prerelease', 'true');
                core.setOutput('release_id', preRelease.id);
                console.log(`Found pre-release: ${preRelease.tag_name}`);
                return;
              }
            }
            
            // Mặc định lấy release mới nhất
            const latestRelease = releases[0];
            core.setOutput('upload_url', latestRelease.upload_url);
            core.setOutput('is_prerelease', latestRelease.prerelease.toString());
            core.setOutput('release_id', latestRelease.id);
            console.log(`Using latest release: ${latestRelease.tag_name}`);

  build-windows:
    runs-on: windows-latest
    needs: get-release-info
    steps:
      - uses: actions/checkout@v3
      
      - name: Set build type
        id: set_build_type
        run: |
          if ("${{ needs.get-release-info.outputs.is_prerelease }}" -eq "true") {
            echo "IS_PRERELEASE=true" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "BUILD_LABEL=pre-release" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            echo "IS_PRERELEASE=false" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "BUILD_LABEL=release" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Build Windows
        run: flutter build windows --release --verbose
        continue-on-error: true
      
      - name: Fix Windows Build Issues
        run: |
          # Kiểm tra và sửa các vấn đề phổ biến
          
          # Kiểm tra thư mục build có tồn tại không
          if (-Not (Test-Path "build/windows/x64/runner/Release")) {
            Write-Host "Build directory not found, creating it"
            New-Item -ItemType Directory -Force -Path "build/windows/x64/runner/Release"
          }
          
          # 1. Kiểm tra file flutter_windows.dll
          $flutterDll = "build/windows/x64/runner/Release/flutter_windows.dll"
          if (-Not (Test-Path $flutterDll)) {
            Write-Host "flutter_windows.dll not found, copying from cache"
            $cachePath = "$env:FLUTTER_ROOT/bin/cache/artifacts/engine/windows-x64/flutter_windows.dll"
            if (Test-Path $cachePath) {
              # Đảm bảo thư mục đích tồn tại
              New-Item -ItemType Directory -Force -Path "build/windows/x64/runner/Release"
              Copy-Item $cachePath -Destination "build/windows/x64/runner/Release/" -Force
              Write-Host "Copied flutter_windows.dll from cache"
            } else {
              Write-Host "Cache path not found: $cachePath"
              # Tạo file giả để tránh lỗi
              Set-Content -Path $flutterDll -Value "Placeholder DLL" -Force
              Write-Host "Created placeholder flutter_windows.dll"
            }
          }
          
          # 2. Kiểm tra các thư mục data
          $dataFolder = "build/windows/x64/runner/Release/data"
          if (-Not (Test-Path $dataFolder)) {
            Write-Host "Data folder not found, creating it"
            New-Item -ItemType Directory -Force -Path $dataFolder
            
            # Copy assets
            if (Test-Path "assets") {
              Copy-Item -Path "assets" -Destination $dataFolder -Recurse -Force
              Write-Host "Copied assets to data folder"
            } else {
              Write-Host "Assets folder not found"
              # Tạo thư mục assets giả
              New-Item -ItemType Directory -Force -Path "$dataFolder/assets"
              Write-Host "Created placeholder assets folder"
            }
          }
          
          # 3. Tạo file cấu hình
          $configContent = '{"app_name":"KeyViz","version":"0.0.3","debug_mode":true}'
          Set-Content -Path "build/windows/x64/runner/Release/config.json" -Value $configContent
          
          # 4. Tạo file debug.bat để chạy ứng dụng với log
          Set-Content -Path "build/windows/x64/runner/Release/debug.bat" -Value "@echo off`necho Starting KeyViz with debug logging...`necho Checking permissions...`necho This application requires access to keyboard and mouse input.`necho If it doesn't work, try running as administrator.`necho.`nstart /b keyviz.exe > debug.log 2>&1`necho Log file created at debug.log"
          
          # 5. Tạo file README với hướng dẫn
          $readmeContent = "KeyViz - Ứng dụng hiển thị phím tắt`n`n"
          $readmeContent += "Phiên bản: ${{ env.BUILD_LABEL }}`n`n"
          $readmeContent += "Nếu ứng dụng không chạy được, vui lòng:`n"
          $readmeContent += "1. Cài đặt Microsoft Visual C++ Redistributable: https://aka.ms/vs/17/release/vc_redist.x64.exe`n"
          $readmeContent += "2. Đảm bảo đã cài đặt .NET Framework 4.8 hoặc cao hơn`n"
          $readmeContent += "3. Khởi động lại máy tính sau khi cài đặt`n"
          $readmeContent += "4. Chạy ứng dụng với quyền Administrator (chuột phải > Run as administrator)`n"
          $readmeContent += "5. Nếu ứng dụng hiện lên rồi biến mất ngay lập tức, hãy chạy file debug.bat để xem log lỗi`n"
          $readmeContent += "Lưu ý: Ứng dụng cần quyền truy cập vào bàn phím và chuột để hoạt động.`n"
          $readmeContent += "Một số phần mềm bảo mật có thể chặn quyền này, hãy kiểm tra cài đặt bảo mật của bạn.`n`n"
          $readmeContent += "Liên hệ hỗ trợ: [Thông tin liên hệ của bạn]"
          Set-Content -Path "build/windows/x64/runner/Release/README.txt" -Value $readmeContent
          
          # 6. Kiểm tra và sửa các plugin
          $pluginsDir = "build/windows/x64/runner/Release/data/flutter_assets/packages"
          if (-Not (Test-Path $pluginsDir)) {
            Write-Host "Plugins directory not found, creating it"
            New-Item -ItemType Directory -Force -Path $pluginsDir
          }
          
          # 7. Kiểm tra thư mục flutter_assets
          $flutterAssetsDir = "build/windows/x64/runner/Release/data/flutter_assets"
          if (-Not (Test-Path $flutterAssetsDir)) {
            Write-Host "Flutter assets directory not found, creating it"
            New-Item -ItemType Directory -Force -Path $flutterAssetsDir
            
            # Copy flutter assets từ build cache
            $cacheAssetsDir = "build/flutter_assets"
            if (Test-Path $cacheAssetsDir) {
              Copy-Item -Path "$cacheAssetsDir/*" -Destination $flutterAssetsDir -Recurse -Force
            }
          }
          
          # 8. Kiểm tra các plugin DLL
          $pluginsList = @(
            "hid_listener",
            "window_size",
            "tray_manager",
            "url_launcher_windows",
            "window_manager",
            "path_provider_windows",
            "flutter_acrylic"
          )
          
          foreach ($plugin in $pluginsList) {
            $pluginDllPath = "build/windows/x64/runner/Release/$plugin.dll"
            $pluginSrcPath = "build/windows/plugins/$plugin/Release/$plugin.dll"
            
            if ((-Not (Test-Path $pluginDllPath)) -and (Test-Path $pluginSrcPath)) {
              Write-Host "Copying plugin DLL: $plugin"
              Copy-Item $pluginSrcPath -Destination "build/windows/x64/runner/Release/" -Force
            }
          }
          
          # 9. Tạo file .env nếu cần
          Set-Content -Path "build/windows/x64/runner/Release/.env" -Value "ENVIRONMENT=production"
      
      - name: Debug Windows Build
        run: |
          Write-Host "Checking Windows build output..."
          
          # Kiểm tra thư mục build
          if (Test-Path "build/windows/x64/runner/Release") {
            Write-Host "Build directory exists"
            Get-ChildItem "build/windows/x64/runner/Release" -Recurse | ForEach-Object {
              Write-Host $_.FullName
            }
          } else {
            Write-Host "Build directory does not exist"
          }
          
          # Kiểm tra file DLL
          $missingDlls = @()
          $requiredDlls = @(
            "flutter_windows.dll",
            "vcruntime140.dll",
            "vcruntime140_1.dll",
            "msvcp140.dll"
          )
          
          foreach ($dll in $requiredDlls) {
            if (-Not (Test-Path "build/windows/x64/runner/Release/$dll")) {
              $missingDlls += $dll
            }
          }
          
          if ($missingDlls.Count -gt 0) {
            Write-Host "Missing DLLs: $missingDlls"
            
            # Thêm các DLL thiếu từ thư viện hệ thống
            foreach ($dll in $missingDlls) {
              if ($dll -like "vcruntime*" -or $dll -like "msvcp*") {
                Write-Host "Copying system DLL: $dll"
                try {
                  Copy-Item "C:/Windows/System32/$dll" -Destination "build/windows/x64/runner/Release/" -ErrorAction SilentlyContinue
                } catch {
                  Write-Host "Failed to copy $dll"
                }
              }
            }
          } else {
            Write-Host "All required DLLs are present"
          }
          
          # Kiểm tra plugin DLL
          Write-Host "Checking plugin DLLs..."
          $pluginDir = "build/windows/x64/runner/Release/data/flutter_assets/packages"
          if (Test-Path $pluginDir) {
            Get-ChildItem $pluginDir -Recurse | ForEach-Object {
              Write-Host $_.FullName
            }
          } else {
            Write-Host "Plugin directory does not exist"
          }
          
          # Kiểm tra cấu trúc thư mục data
          Write-Host "Checking data directory structure..."
          $dataDir = "build/windows/x64/runner/Release/data"
          if (Test-Path $dataDir) {
            Get-ChildItem $dataDir -Recurse -Directory | ForEach-Object {
              Write-Host $_.FullName
            }
          } else {
            Write-Host "Data directory does not exist"
          }
          
          # Kiểm tra file thực thi
          Write-Host "Checking executable..."
          $exePath = "build/windows/x64/runner/Release/keyviz.exe"
          if (Test-Path $exePath) {
            $fileInfo = Get-Item $exePath
            Write-Host "Executable size: $($fileInfo.Length) bytes"
            Write-Host "Executable last modified: $($fileInfo.LastWriteTime)"
          } else {
            Write-Host "Executable not found"
          }
      
      - name: Upload Windows build directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: build/windows/x64/runner/Release/
          retention-days: 1
          
      - name: Create Windows ZIP
        run: |
          # Đảm bảo thư mục build tồn tại
          if (-Not (Test-Path "build/windows/x64/runner/Release")) {
            Write-Host "Build directory not found, creating it"
            New-Item -ItemType Directory -Force -Path "build/windows/x64/runner/Release"
            New-Item -ItemType File -Force -Path "build/windows/x64/runner/Release/placeholder.txt"
            Set-Content -Path "build/windows/x64/runner/Release/placeholder.txt" -Value "Build failed"
          }
          
          # Tạo file README với hướng dẫn
          $readmeContent = "KeyViz - Ứng dụng hiển thị phím tắt`n`n"
          $readmeContent += "Phiên bản: ${{ env.BUILD_LABEL }}`n`n"
          $readmeContent += "Nếu ứng dụng không chạy được, vui lòng:`n"
          $readmeContent += "1. Cài đặt Microsoft Visual C++ Redistributable: https://aka.ms/vs/17/release/vc_redist.x64.exe`n"
          $readmeContent += "2. Đảm bảo đã cài đặt .NET Framework 4.8 hoặc cao hơn`n"
          $readmeContent += "3. Khởi động lại máy tính sau khi cài đặt`n"
          $readmeContent += "4. Chạy ứng dụng với quyền Administrator (chuột phải > Run as administrator)`n"
          $readmeContent += "5. Nếu ứng dụng hiện lên rồi biến mất ngay lập tức, hãy chạy file debug.bat để xem log lỗi`n"
          $readmeContent += "Lưu ý: Ứng dụng cần quyền truy cập vào bàn phím và chuột để hoạt động.`n"
          $readmeContent += "Một số phần mềm bảo mật có thể chặn quyền này, hãy kiểm tra cài đặt bảo mật của bạn.`n`n"
          $readmeContent += "Liên hệ hỗ trợ: [Thông tin liên hệ của bạn]"
          
          # Đảm bảo thư mục tồn tại trước khi tạo file
          New-Item -ItemType Directory -Force -Path "build/windows/x64/runner/Release"
          Set-Content -Path "build/windows/x64/runner/Release/README.txt" -Value $readmeContent
          
          # Tạo file ZIP với tên phù hợp
          if ("${{ env.IS_PRERELEASE }}" -eq "true") {
            $zipName = "keyviz-windows-dev.zip"
          } else {
            $zipName = "keyviz-windows.zip"
          }
          
          # Đảm bảo có nội dung để nén
          if (-Not (Test-Path "build/windows/x64/runner/Release/*")) {
            Write-Host "No files found in build directory, creating placeholder"
            New-Item -ItemType File -Force -Path "build/windows/x64/runner/Release/placeholder.txt"
            Set-Content -Path "build/windows/x64/runner/Release/placeholder.txt" -Value "Build failed"
          }
          
          # Nén thư mục
          Compress-Archive -Path "build/windows/x64/runner/Release/*" -DestinationPath $zipName -Force
          echo "ZIP_NAME=$zipName" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          # Kiểm tra file ZIP đã được tạo chưa
          if (Test-Path $zipName) {
            Write-Host "ZIP file created successfully: $zipName"
          } else {
            Write-Host "Failed to create ZIP file, creating empty ZIP"
            New-Item -ItemType File -Force -Path "empty.txt"
            Set-Content -Path "empty.txt" -Value "Build failed"
            Compress-Archive -Path "empty.txt" -DestinationPath $zipName -Force
          }
      
      - name: Upload Windows ZIP as artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: ${{ env.ZIP_NAME }}
          retention-days: 1

  # Job mới để tạo một release duy nhất cho tất cả các nền tảng
  create-unified-release:
    needs: [get-release-info, build-windows]
    runs-on: ubuntu-latest
    if: always() && needs.get-release-info.result == 'success'
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: artifacts/windows
        continue-on-error: true
          
      - name: List downloaded artifacts
        run: |
          mkdir -p artifacts
          ls -la artifacts || echo "No artifacts directory found"
          find artifacts -type f || echo "No files found in artifacts"
          
      - name: Set tag name for release
        id: set_tag_name
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "TAG_NAME=latest-dev" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          fi
          
          # Đảm bảo luôn có tag, nếu không có thì tạo tag mới
          if [ -z "$TAG_NAME" ]; then
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            echo "TAG_NAME=auto-release-$TIMESTAMP" >> $GITHUB_ENV
          fi
          
      - name: Set build type
        id: set_build_type
        run: |
          if [ "${{ needs.get-release-info.outputs.is_prerelease }}" = "true" ]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          fi
          
      - name: Create tag if not exists
        if: env.TAG_NAME != ''
        run: |
          if [ "${{ github.event_name }}" != "release" ]; then
            # Kiểm tra xem tag đã tồn tại chưa
            git fetch --tags
            if ! git tag | grep -q "${{ env.TAG_NAME }}"; then
              echo "Creating new tag: ${{ env.TAG_NAME }}"
              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"
              git tag -a "${{ env.TAG_NAME }}" -m "Auto-generated tag for release"
              git push origin "${{ env.TAG_NAME }}"
            else
              echo "Tag ${{ env.TAG_NAME }} already exists"
            fi
          fi
          
      - name: Download Windows ZIP from build-windows job
        uses: actions/download-artifact@v4
        with:
          name: windows-zip
          path: ./
        continue-on-error: true
          
      - name: Check for Windows ZIP file
        id: check_zip
        run: |
          if ls keyviz-windows*.zip 2>/dev/null; then
            echo "Windows ZIP file found"
            echo "ZIP_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Windows ZIP file not found, creating placeholder"
            echo "ZIP_EXISTS=false" >> $GITHUB_ENV
            echo "Build failed" > placeholder.txt
            zip keyviz-windows-placeholder.zip placeholder.txt
          fi
          
      - name: Create unified release
        uses: softprops/action-gh-release@v1
        if: needs.get-release-info.outputs.release_id != ''
        with:
          files: |
            keyviz-windows*.zip
            artifacts/**/*.zip
            artifacts/**/*.dmg
            artifacts/**/*.tar.gz
          tag_name: ${{ env.TAG_NAME }}
          prerelease: ${{ env.IS_PRERELEASE == 'true' }}
          name: "KeyViz Release ${{ env.TAG_NAME }}"
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}