name: Auto Create Release

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Create as pre-release'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_created: ${{ steps.create_release.outcome == 'success' }}
      release_id: ${{ steps.create_release.outputs.id }}
      release_tag: ${{ env.NEW_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set release type
        id: set_release_type
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
            echo "RELEASE_PREFIX=dev-" >> $GITHUB_ENV
            echo "BUMP_VERSION=false" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
            echo "RELEASE_PREFIX=" >> $GITHUB_ENV
            echo "BUMP_VERSION=true" >> $GITHUB_ENV
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
            echo "RELEASE_PREFIX=" >> $GITHUB_ENV
            echo "BUMP_VERSION=true" >> $GITHUB_ENV
          fi
      
      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Lấy tag mới nhất hoặc sử dụng v0.0.0 nếu không có tag nào
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          
          # Lấy phiên bản từ tag
          VERSION=${LATEST_TAG#v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          
          # Tăng số patch version nếu cần
          if [[ "${{ env.BUMP_VERSION }}" == "true" ]]; then
            PATCH=$((PATCH + 1))
          fi
          
          # Tạo tag mới
          if [[ "${{ env.IS_PRERELEASE }}" == "true" && "${{ env.BUMP_VERSION }}" == "false" ]]; then
            # Đối với nhánh develop, sử dụng timestamp thay vì tăng phiên bản
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            NEW_TAG="${{ env.RELEASE_PREFIX }}$MAJOR.$MINOR.$PATCH-$TIMESTAMP"
          else
            NEW_TAG="${{ env.RELEASE_PREFIX }}v$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "NEW_VERSION=$MAJOR.$MINOR.$PATCH" >> $GITHUB_ENV
          echo "::set-output name=new_tag::$NEW_TAG"
      
      - name: Check for changes
        id: check_changes
        run: |
          # Kiểm tra xem có thay đổi nào kể từ tag cuối cùng không
          if [ "$LATEST_TAG" != "v0.0.0" ]; then
            CHANGES=$(git log $LATEST_TAG..HEAD --oneline)
            if [ -z "$CHANGES" ]; then
              echo "No changes since last tag, skipping release"
              echo "SKIP_RELEASE=true" >> $GITHUB_ENV
            else
              echo "SKIP_RELEASE=false" >> $GITHUB_ENV
              echo "CHANGES<<EOF" >> $GITHUB_ENV
              echo "$CHANGES" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
          else
            echo "SKIP_RELEASE=false" >> $GITHUB_ENV
            echo "CHANGES=Initial release" >> $GITHUB_ENV
          fi
      
      - name: Update version in pubspec.yaml
        if: env.SKIP_RELEASE == 'false' && env.BUMP_VERSION == 'true'
        run: |
          # Cập nhật phiên bản trong pubspec.yaml
          sed -i "s/^version: .*/version: ${{ env.NEW_VERSION }}/" pubspec.yaml
      
      - name: Commit version update
        if: env.SKIP_RELEASE == 'false' && env.BUMP_VERSION == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml
          git commit -m "Bump version to ${{ env.NEW_TAG }}"
          git push
          git tag ${{ env.NEW_TAG }}
          git push --tags
      
      - name: Create tag for develop
        if: env.SKIP_RELEASE == 'false' && env.BUMP_VERSION == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ env.NEW_TAG }}
          git push --tags
      
      - name: Create Release
        if: env.SKIP_RELEASE == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: ${{ env.IS_PRERELEASE == 'true' && 'Pre-release' || 'Release' }} ${{ env.NEW_TAG }}
          body: |
            ${{ env.IS_PRERELEASE == 'true' && 'Pre-release build from develop branch.' || 'Automatic release created by GitHub Actions.' }}
            
            Changes in this release:
            ```
            ${{ env.CHANGES }}
            ```
          draft: false
          prerelease: ${{ env.IS_PRERELEASE }}
      
      - name: Trigger other workflows manually
        if: env.SKIP_RELEASE == 'false'
        run: |
          echo "Kích hoạt các workflow khác..."
          
          # Kích hoạt workflow build
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yml/dispatches \
            -d '{"ref":"${{ github.ref }}"}'
          
          # Kích hoạt workflow msix
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/msix.yml/dispatches \
            -d '{"ref":"${{ github.ref }}"}'
          
          # Kích hoạt workflow docker
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/docker.yml/dispatches \
            -d '{"ref":"${{ github.ref }}"}'
          
          echo "Đã kích hoạt tất cả các workflow"