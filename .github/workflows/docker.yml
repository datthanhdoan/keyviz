name: Build and Push Docker Image

on:
  release:
    types: [ created, published ]
  workflow_dispatch:
  workflow_run:
    workflows: ["Auto Create Release"]
    types:
      - completed
    branches:
      - main
      - develop
  push:
    branches:
      - develop
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.github/workflows/auto-release.yml'

# Cấp quyền cho GITHUB_TOKEN
permissions:
  contents: read
  packages: write

jobs:
  get-release-info:
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.get_release_info.outputs.is_prerelease }}
      release_tag: ${{ steps.get_release_info.outputs.release_tag }}
    steps:
      - name: Get release info
        id: get_release_info
        uses: actions/github-script@v6
        with:
          script: |
            // Nếu là sự kiện release, lấy thông tin từ sự kiện
            if (context.eventName === 'release') {
              core.setOutput('is_prerelease', context.payload.release.prerelease.toString());
              core.setOutput('release_tag', context.payload.release.tag_name);
              return;
            }
            
            // Nếu là push hoặc workflow_run, lấy release mới nhất
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 5
            });
            
            if (releases.length === 0) {
              core.setFailed('No releases found');
              return;
            }
            
            // Nếu là push vào develop, tìm pre-release mới nhất
            if (context.eventName === 'push' && context.ref === 'refs/heads/develop') {
              const preRelease = releases.find(release => release.prerelease);
              if (preRelease) {
                core.setOutput('is_prerelease', 'true');
                core.setOutput('release_tag', preRelease.tag_name);
                console.log(`Found pre-release: ${preRelease.tag_name}`);
                return;
              }
            }
            
            // Mặc định lấy release mới nhất
            const latestRelease = releases[0];
            core.setOutput('is_prerelease', latestRelease.prerelease.toString());
            core.setOutput('release_tag', latestRelease.tag_name);
            console.log(`Using latest release: ${latestRelease.tag_name}`);

  build-and-push:
    runs-on: ubuntu-latest
    needs: get-release-info
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        continue-on-error: true
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      
      - name: Set Docker tags
        id: meta
        run: |
          if [ "${{ needs.get-release-info.outputs.is_prerelease }}" = "true" ]; then
            echo "DOCKER_TAGS=ghcr.io/${{ github.repository }}:${{ needs.get-release-info.outputs.release_tag }},ghcr.io/${{ github.repository }}:dev" >> $GITHUB_ENV
          else
            echo "DOCKER_TAGS=ghcr.io/${{ github.repository }}:${{ needs.get-release-info.outputs.release_tag }},ghcr.io/${{ github.repository }}:latest" >> $GITHUB_ENV
          fi
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true 