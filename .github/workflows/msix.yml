name: Build Windows MSIX Package

on:
  release:
    types: [ created, published ]
  workflow_dispatch:
  workflow_run:
    workflows: ["Auto Create Release"]
    types:
      - completed
    branches:
      - main
      - develop
  push:
    branches:
      - develop
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.github/workflows/auto-release.yml'

# Cấp quyền cho GITHUB_TOKEN
permissions:
  contents: write  # Cần thiết để tải lên tệp vào releases

jobs:
  get-release-info:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_release_info.outputs.upload_url }}
      is_prerelease: ${{ steps.get_release_info.outputs.is_prerelease }}
      release_id: ${{ steps.get_release_info.outputs.release_id }}
    steps:
      - name: Get release info
        id: get_release_info
        uses: actions/github-script@v6
        with:
          script: |
            // Nếu là sự kiện release, lấy thông tin từ sự kiện
            if (context.eventName === 'release') {
              core.setOutput('upload_url', context.payload.release.upload_url);
              core.setOutput('is_prerelease', context.payload.release.prerelease.toString());
              core.setOutput('release_id', context.payload.release.id);
              return;
            }
            
            // Nếu là push hoặc workflow_run, lấy release mới nhất
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 5
            });
            
            if (releases.length === 0) {
              core.setFailed('No releases found');
              return;
            }
            
            // Nếu là push vào develop, tìm pre-release mới nhất
            if (context.eventName === 'push' && context.ref === 'refs/heads/develop') {
              const preRelease = releases.find(release => release.prerelease);
              if (preRelease) {
                core.setOutput('upload_url', preRelease.upload_url);
                core.setOutput('is_prerelease', 'true');
                core.setOutput('release_id', preRelease.id);
                console.log(`Found pre-release: ${preRelease.tag_name}`);
                return;
              }
            }
            
            // Mặc định lấy release mới nhất
            const latestRelease = releases[0];
            core.setOutput('upload_url', latestRelease.upload_url);
            core.setOutput('is_prerelease', latestRelease.prerelease.toString());
            core.setOutput('release_id', latestRelease.id);
            console.log(`Using latest release: ${latestRelease.tag_name}`);

  build-msix:
    runs-on: windows-latest
    needs: get-release-info
    steps:
      - uses: actions/checkout@v3
      
      - name: Set build type
        id: set_build_type
        run: |
          if ("${{ needs.get-release-info.outputs.is_prerelease }}" -eq "true") {
            echo "IS_PRERELEASE=true" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "MSIX_SUFFIX=-dev" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            echo "IS_PRERELEASE=false" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "MSIX_SUFFIX=" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Build Windows
        run: flutter build windows --release
        continue-on-error: true
      
      - name: Build MSIX Package
        run: |
          # Đảm bảo đã cài đặt msix package
          flutter pub add msix --dev
          
          # Build MSIX sử dụng cấu hình từ pubspec.yaml
          flutter pub run msix:create
        continue-on-error: true
      
      - name: Check MSIX file and create placeholder if needed
        run: |
          $msixPath = "build/windows/x64/runner/Release/keyviz.msix"
          if (-Not (Test-Path $msixPath)) {
            Write-Host "MSIX file not found, creating placeholder"
            New-Item -ItemType Directory -Force -Path build/windows/x64/runner/Release
            New-Item -ItemType File -Force -Path $msixPath
            Set-Content -Path $msixPath -Value "MSIX build failed"
          }
          
          # Rename MSIX file if it's a pre-release
          if ("${{ env.IS_PRERELEASE }}" -eq "true") {
            $newMsixPath = "build/windows/x64/runner/Release/keyviz-dev.msix"
            Copy-Item -Path $msixPath -Destination $newMsixPath -Force
            echo "MSIX_PATH=$newMsixPath" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "MSIX_NAME=keyviz-windows-dev.msix" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            echo "MSIX_PATH=$msixPath" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "MSIX_NAME=keyviz-windows.msix" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
      
      - name: Set tag name for release
        id: set_tag_name
        run: |
          if ("${{ github.event_name }}" -eq "push" -and "${{ github.ref }}" -eq "refs/heads/develop") {
            echo "TAG_NAME=latest-dev" | Out-File -FilePath $env:GITHUB_ENV -Append
          } elseif ("${{ github.event_name }}" -eq "release") {
            echo "TAG_NAME=${{ github.event.release.tag_name }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            echo "TAG_NAME=${{ github.ref_name }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
          
          # Đảm bảo luôn có tag, nếu không có thì tạo tag mới
          if (-not (Test-Path env:TAG_NAME)) {
            $timestamp = Get-Date -Format "yyyyMMddHHmmss"
            echo "TAG_NAME=auto-release-$timestamp" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Upload MSIX Package
        uses: softprops/action-gh-release@v1
        if: needs.get-release-info.outputs.release_id != ''
        with:
          files: ${{ env.MSIX_PATH }}
          tag_name: ${{ env.TAG_NAME }}
          prerelease: ${{ needs.get-release-info.outputs.is_prerelease == 'true' }}
          name: "KeyViz Release ${{ env.TAG_NAME }}"
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload MSIX Package as Artifact
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MSIX_NAME }}
          path: ${{ env.MSIX_PATH }}
          retention-days: 7

      - name: Create tag if not exists
        if: env.TAG_NAME != ''
        run: |
          if ("${{ github.event_name }}" -ne "release") {
            # Kiểm tra xem tag đã tồn tại chưa
            $tagExists = git ls-remote --tags origin refs/tags/${{ env.TAG_NAME }} | Select-String -Pattern "${{ env.TAG_NAME }}"
            
            if (-not $tagExists) {
              Write-Host "Creating new tag: ${{ env.TAG_NAME }}"
              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"
              git tag -a "${{ env.TAG_NAME }}" -m "Auto-generated tag for release"
              git push origin "${{ env.TAG_NAME }}"
            } else {
              Write-Host "Tag ${{ env.TAG_NAME }} already exists"
            }
          } 